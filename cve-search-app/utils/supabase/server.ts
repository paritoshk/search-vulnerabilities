import { type CookieOptions, createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

// Define a type for the Supabase client to ensure clarity
import type { SupabaseClient } from "@supabase/supabase-js";

export async function getSupabaseServerClient(): Promise<SupabaseClient> {
  const cookieStore = await cookies();

  return createServerClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!, {
    cookies: {
      get: (name: string) => {
        return cookieStore.get(name)?.value;
      },
      set: (name: string, value: string, options: CookieOptions) => {
        // Setting cookies from Server Components directly has limitations.
        // Auth state changes are typically handled by middleware or in Client Components.
        // This `set` operation might not persist as expected if called from a RSC during rendering.
        try {
          // cookieStore.set({ name, value, ...options }); // This might still error if cookieStore is Readonly
        } catch (error) {
          // console.error("Error setting cookie from server client (set was called from RSC?)", error);
        }
      },
      remove: (name: string, options: CookieOptions) => {
        // Removing cookies from Server Components directly has limitations.
        // Similar to `set`, this might not work as expected from an RSC during rendering.
        try {
          // cookieStore.delete({ name, ...options }); // This might still error if cookieStore is Readonly
        } catch (error) {
          // console.error("Error removing cookie from server client (remove was called from RSC?)", error);
        }
      },
    },
  });
} 