'use client'; // Required for useState and event handlers

import { useState } from 'react';
import Link from 'next/link';
import { searchCVEsAction, type CVE, type SearchResult } from './actions'; // Corrected path
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

export default function Home() {
  // Removed searchParams as we'll handle query with client state for this interactive page
  const [queryInput, setQueryInput] = useState<string>('');
  const [currentQuery, setCurrentQuery] = useState<string>('');
  const [searchResult, setSearchResult] = useState<SearchResult | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSearch = async () => {
    if (!queryInput.trim()) {
      setError('Please enter a search query.');
      setSearchResult(null);
      return;
    }
    setIsLoading(true);
    setError(null);
    setSearchResult(null);
    setCurrentQuery(queryInput);

    try {
      const result = await searchCVEsAction(queryInput);
      setSearchResult(result);
      if (result.dbError) {
        setError(`Database error: ${result.dbError}`);
      }
      if (result.llmQueryAnalysis?.errorMessage) {
        // Prefer LLM error message from llmQueryAnalysis if it exists
        setError(prevError => prevError ? `${prevError}\nLLM: ${result.llmQueryAnalysis?.errorMessage}` : `LLM Error: ${result.llmQueryAnalysis?.errorMessage}`);
      }
    } catch (e: any) {
      console.error("Search action failed:", e);
      setError(e.message || 'An unexpected error occurred.');
    }
    setIsLoading(false);
  };

  return (
    <main className="p-4 md:p-8 space-y-6 max-w-4xl mx-auto">
      <div className="text-center">
        <h1 className="font-semibold text-3xl">CVE Search Engine</h1>
        <p className="text-muted-foreground mt-2">
          Enter a natural language query to search our CVE database. Powered by AI.
        </p>
      </div>

      <div className="flex w-full items-center space-x-2">
        <Input
          type="text"
          placeholder='e.g., "recent critical vulnerabilities in Apache products" or "show all CVEs"'
          value={queryInput}
          onChange={(e) => setQueryInput(e.target.value)}
          onKeyDown={(e) => e.key === 'Enter' && !isLoading && handleSearch()}
          disabled={isLoading}
          className="flex-grow"
        />
        <Button onClick={handleSearch} disabled={isLoading}>
          {isLoading ? 'Searching...' : 'Search'}
        </Button>
      </div>

      {error && (
        <Alert variant="destructive">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription style={{ whiteSpace: 'pre-line' }}>{error}</AlertDescription>
        </Alert>
      )}

      {currentQuery && !isLoading && searchResult && (
        <div className="mt-6">
          <h2 className="text-xl font-semibold mb-3">Results for: &quot;{currentQuery}&quot;</h2>
          
          {/* Updated AI Query Breakdown section */}
          {searchResult.llmQueryAnalysis && (
            <Card className="mb-4 bg-secondary/50">
              <CardHeader className="pb-2 pt-4">
                <CardTitle className="text-sm font-medium">AI Query Analysis</CardTitle>
              </CardHeader>
              <CardContent className="text-xs text-muted-foreground pb-4 space-y-2">
                {searchResult.llmQueryAnalysis.toolArguments && Object.keys(searchResult.llmQueryAnalysis.toolArguments).length > 0 && (
                  <div>
                    <p className="font-semibold">LLM Tool Arguments:</p>
                    <pre className='whitespace-pre-wrap bg-muted p-2 rounded text-xs break-all'>
                      {JSON.stringify(searchResult.llmQueryAnalysis.toolArguments, null, 2)}
                    </pre>
                  </div>
                )}
                {searchResult.llmQueryAnalysis.generatedSqlConditions && searchResult.llmQueryAnalysis.generatedSqlConditions.length > 0 && (
                  <div>
                    <p className="font-semibold mt-2">Generated SQL Conditions:</p>
                    <ul className="list-disc pl-5 mt-1">
                      {searchResult.llmQueryAnalysis.generatedSqlConditions.map((condition: string, index: number) => (
                        <li key={index}><code className="bg-muted p-1 rounded">{condition}</code></li>
                      ))}
                    </ul>
                  </div>
                )}
                {searchResult.llmQueryAnalysis.rawResponse && (
                    <details className='mt-2 text-xs'>
                        <summary>Show Raw LLM Tool Response (Arguments/Error)</summary>
                        <pre className='whitespace-pre-wrap bg-muted p-2 rounded text-xs break-all'>
                          {JSON.stringify(searchResult.llmQueryAnalysis.rawResponse, null, 2)}
                        </pre>
                    </details>
                )}
                {/* Display LLM error message if it exists and wasn't shown in the main error alert */}
                {searchResult.llmQueryAnalysis.errorMessage && !error?.includes(searchResult.llmQueryAnalysis.errorMessage) && (
                    <p className="text-red-500 mt-2">LLM Note: {searchResult.llmQueryAnalysis.errorMessage}</p>
                )}
              </CardContent>
            </Card>
          )}

          {searchResult.cves && searchResult.cves.length > 0 ? (
            <div className="space-y-4">
              {searchResult.cves.map((cve: CVE) => (
                <Card key={cve.cve_id}>
                  <CardHeader>
                    <CardTitle>{cve.cve_id}</CardTitle>
                    <CardDescription>
                      Published: {cve.published_date ? new Date(cve.published_date).toLocaleDateString() : 'N/A'}
                      {' '}| Assigner: {cve.assigner || 'N/A'}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm mb-2">{cve.description_text || 'No description available.'}</p>
                    {cve.impact_data?.baseMetricV3?.cvssV3 && (
                      <p className="text-xs">
                        Severity: <span className="font-semibold">{cve.impact_data.baseMetricV3.cvssV3.baseSeverity}</span>
                        {' '}(Score: {cve.impact_data.baseMetricV3.cvssV3.baseScore})
                      </p>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            (!searchResult.llmQueryAnalysis || !searchResult.llmQueryAnalysis.errorMessage) && <p>No CVEs found matching your query.</p>
          )}
        </div>
      )}
    </main>
  );
}
