'use client'; // Required for useState and event handlers

import { useState, useCallback } from 'react';
import Link from 'next/link';
import { searchCVEsAction, type CVE, type SearchResult as CurrentSearchResult } from './actions'; // Original action
import { getAndExecuteCveSearch, type CveServiceSuccess, type CveServiceError } from '../src/agentService'; // New service
import CveTable from '../src/components/CveTable'; // New table for enhanced results

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"; // Using Tabs for mode switch

type SearchMode = 'current' | 'enhanced';

export default function Home() {
  const [queryInput, setQueryInput] = useState<string>('');
  const [currentQuery, setCurrentQuery] = useState<string>('');
  
  // State for original search results
  const [currentSearchResult, setCurrentSearchResult] = useState<CurrentSearchResult | null>(null);
  // State for new enhanced search results
  const [enhancedSearchResult, setEnhancedSearchResult] = useState<CveServiceSuccess | null>(null);
  
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [searchMode, setSearchMode] = useState<SearchMode>('current'); // Default to current

  const handleSearch = useCallback(async () => {
    if (!queryInput.trim()) {
      setError('Please enter a search query.');
      setCurrentSearchResult(null);
      setEnhancedSearchResult(null);
      return;
    }
    setIsLoading(true);
    setError(null);
    setCurrentSearchResult(null);
    setEnhancedSearchResult(null);
    setCurrentQuery(queryInput);

    try {
      if (searchMode === 'current') {
        const result = await searchCVEsAction(queryInput);
        setCurrentSearchResult(result);
        if (result.dbError) {
          setError(`Database error: ${result.dbError}`);
        }
        if (result.llmQueryAnalysis?.errorMessage) {
          setError(prevError => prevError ? `${prevError}\nLLM: ${result.llmQueryAnalysis?.errorMessage}` : `LLM Error: ${result.llmQueryAnalysis?.errorMessage}`);
        }
      } else { // 'enhanced' mode
        const result = await getAndExecuteCveSearch(queryInput);
        if ('rows' in result) {
          setEnhancedSearchResult(result);
        } else {
          setError(`Enhanced Search Failed [${result.type}]: ${result.message}${result.details ? ' - Details: ' + JSON.stringify(result.details) : ''}`);
        }
      }
    } catch (e: any) {
      console.error("Search action failed:", e);
      setError(e.message || 'An unexpected error occurred.');
    }
    setIsLoading(false);
  }, [queryInput, searchMode]);

  return (
    <main className="p-4 md:p-8 space-y-6 max-w-4xl mx-auto">
      <div className="text-center">
        <h1 className="font-semibold text-3xl">CVE Search Engine</h1>
        <p className="text-muted-foreground mt-2">
          Enter a natural language query to search our CVE database.
        </p>
      </div>

      <Tabs value={searchMode} onValueChange={(value: string) => setSearchMode(value as SearchMode)} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="current">Standard Search</TabsTrigger>
          <TabsTrigger value="enhanced">Enhanced Search (Beta)</TabsTrigger>
        </TabsList>
      </Tabs>

      <div className="flex w-full items-center space-x-2">
        <Input
          type="text"
          placeholder={searchMode === 'current' 
            ? 'e.g., "recent critical vulnerabilities in Apache..."' 
            : 'e.g., "Microsoft RCE from last month with exploits"'}
          value={queryInput}
          onChange={(e) => setQueryInput(e.target.value)}
          onKeyDown={(e) => e.key === 'Enter' && !isLoading && handleSearch()}
          disabled={isLoading}
          className="flex-grow"
        />
        <Button onClick={handleSearch} disabled={isLoading}>
          {isLoading ? 'Searching...' : 'Search'}
        </Button>
      </div>

      {error && (
        <Alert variant="destructive">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription style={{ whiteSpace: 'pre-line' }}>{error}</AlertDescription>
        </Alert>
      )}

      {currentQuery && !isLoading && (
        <div className="mt-6">
          <h2 className="text-xl font-semibold mb-3">Results for: &quot;{currentQuery}&quot; ({searchMode === 'current' ? 'Standard' : 'Enhanced'})</h2>
          
          {/* Display results for CURRENT search mode */} 
          {searchMode === 'current' && currentSearchResult && (
            <>
              {currentSearchResult.llmQueryAnalysis && (
                <Card className="mb-4 bg-secondary/50">
                  <CardHeader className="pb-2 pt-4">
                    <CardTitle className="text-sm font-medium">AI Query Analysis (Standard)</CardTitle>
                  </CardHeader>
                  <CardContent className="text-xs text-muted-foreground pb-4 space-y-2">
                    {currentSearchResult.llmQueryAnalysis.toolArguments && Object.keys(currentSearchResult.llmQueryAnalysis.toolArguments).length > 0 && (
                      <div>
                        <p className="font-semibold">LLM Tool Arguments:</p>
                        <pre className='whitespace-pre-wrap bg-muted p-2 rounded text-xs break-all'>
                          {JSON.stringify(currentSearchResult.llmQueryAnalysis.toolArguments, null, 2)}
                        </pre>
                      </div>
                    )}
                    {currentSearchResult.llmQueryAnalysis.generatedSqlConditions && currentSearchResult.llmQueryAnalysis.generatedSqlConditions.length > 0 && (
                      <div>
                        <p className="font-semibold mt-2">Generated SQL Conditions:</p>
                        <ul className="list-disc pl-5 mt-1">
                          {currentSearchResult.llmQueryAnalysis.generatedSqlConditions.map((condition: string, index: number) => (
                            <li key={index}><code className="bg-muted p-1 rounded">{condition}</code></li>
                          ))}
                        </ul>
                      </div>
                    )}
                    {currentSearchResult.llmQueryAnalysis.rawResponse && (
                        <details className='mt-2 text-xs'>
                            <summary>Show Raw LLM Tool Response</summary>
                            <pre className='whitespace-pre-wrap bg-muted p-2 rounded text-xs break-all'>
                              {JSON.stringify(currentSearchResult.llmQueryAnalysis.rawResponse, null, 2)}
                            </pre>
                        </details>
                    )}
                    {currentSearchResult.llmQueryAnalysis.errorMessage && !error?.includes(currentSearchResult.llmQueryAnalysis.errorMessage) && (
                        <p className="text-red-500 mt-2">LLM Note: {currentSearchResult.llmQueryAnalysis.errorMessage}</p>
                    )}
                  </CardContent>
                </Card>
              )}

              {currentSearchResult.cves && currentSearchResult.cves.length > 0 ? (
                <div className="space-y-4">
                  {currentSearchResult.cves.map((cve: CVE) => (
                    <Card key={cve.cve_id}>
                      <CardHeader>
                        <CardTitle>{cve.cve_id}</CardTitle>
                        <CardDescription>
                          Published: {cve.published_date ? new Date(cve.published_date).toLocaleDateString() : 'N/A'}
                          {' '}| Assigner: {cve.assigner || 'N/A'}
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <p className="text-sm mb-2">{cve.description_text || 'No description available.'}</p>
                        {cve.impact_data?.baseMetricV3?.cvssV3 && (
                          <p className="text-xs">
                            Severity: <span className="font-semibold">{cve.impact_data.baseMetricV3.cvssV3.baseSeverity}</span>
                            {' '}(Score: {cve.impact_data.baseMetricV3.cvssV3.baseScore})
                          </p>
                        )}
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                (!currentSearchResult.llmQueryAnalysis || !currentSearchResult.llmQueryAnalysis.errorMessage) && <p>No CVEs found for standard search.</p>
              )}
            </>
          )}

          {/* Display results for ENHANCED search mode */} 
          {searchMode === 'enhanced' && (
            <>
              {enhancedSearchResult?.llmArgs && (
                 <Card className="mb-4 bg-secondary/50">
                  <CardHeader className="pb-2 pt-4">
                    <CardTitle className="text-sm font-medium">AI Query Analysis (Enhanced)</CardTitle>
                  </CardHeader>
                  <CardContent className="text-xs text-muted-foreground pb-4 space-y-2">
                    <div>
                      <p className="font-semibold">LLM Filter Arguments:</p>
                      <pre className='whitespace-pre-wrap bg-muted p-2 rounded text-xs break-all'>
                        {JSON.stringify(enhancedSearchResult.llmArgs, null, 2)}
                      </pre>
                    </div>
                  </CardContent>
                </Card>
              )}
              <CveTable rows={enhancedSearchResult?.rows} isLoading={isLoading} error={error && searchMode === 'enhanced' ? error : null} />
            </>
          )}
        </div>
      )}
    </main>
  );
}
