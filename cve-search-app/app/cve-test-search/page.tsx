'use client';

import React, { useState, useCallback } from 'react';
import CveTable from '../../src/components/CveTable'; // Adjusted path relative to app directory
import { getAndExecuteCveSearch, type CveServiceSuccess, type CveServiceError } from '../../src/agentService'; // Adjusted path

const CveTestSearchPage: React.FC = () => {
  const [query, setQuery] = useState<string>('');
  const [results, setResults] = useState<CveServiceSuccess | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const handleSearch = useCallback(async () => {
    if (!query.trim()) {
      setError('Please enter a search query.');
      setResults(null);
      return;
    }
    setIsLoading(true);
    setError(null);
    setResults(null);

    try {
      const searchResult = await getAndExecuteCveSearch(query);
      if ('rows' in searchResult) {
        setResults(searchResult);
      } else {
        setError(`Search failed [${searchResult.type}]: ${searchResult.message}${searchResult.details ? ' - Details: ' + JSON.stringify(searchResult.details) : ''}`);
      }
    } catch (e: any) {
      console.error("Search page error:", e);
      setError(`An unexpected error occurred: ${e.message}`);
    }
    setIsLoading(false);
  }, [query]);

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
      <h1>CVE Test Search (App Router)</h1>
      <div style={{ marginBottom: '20px' }}>
        <input
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="Enter natural language CVE query..."
          style={{ width: '400px', padding: '8px', marginRight: '10px' }}
          onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
        />
        <button onClick={handleSearch} disabled={isLoading} style={{ padding: '8px 15px' }}>
          {isLoading ? 'Searching...' : 'Search'}
        </button>
      </div>

      {results?.llmArgs && (
        <div style={{ marginBottom: '20px', padding: '10px', backgroundColor: '#f0f0f0', border: '1px solid #ccc' }}>
          <strong>LLM Filter Arguments:</strong>
          <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>
            {JSON.stringify(results.llmArgs, null, 2)}
          </pre>
        </div>
      )}

      <CveTable rows={results?.rows} isLoading={isLoading} error={error} />
    </div>
  );
};

export default CveTestSearchPage; 