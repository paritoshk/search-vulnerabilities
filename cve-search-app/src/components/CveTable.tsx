import React from 'react';

// Define a type for the CVE row data structure based on expected API response
// This should align with the columns selected in buildSQL
interface CVERow {
  cve_id: string;
  assigner: string;
  problem_type_data: any; // Or a more specific type if you parse it
  references_data: any[]; // Or a more specific type
  description_text: string;
  impact_data: any; // Or a more specific type like CVSSMetric
  published_date: string;
  last_modified_date: string;
  // Add other fields if they are selected and needed for display
}

interface CveTableProps {
  rows: CVERow[] | null | undefined;
  isLoading?: boolean;
  error?: string | null;
}

/**
 * A React component to display CVE data in a table, styled for a modern look.
 * Handles loading, error, and empty states.
 */
const CveTable: React.FC<CveTableProps> = ({ rows, isLoading, error }) => {
  if (isLoading) {
    return <div className="p-4 text-center">Loading CVE data...</div>;
  }

  if (error) {
    return <div className="p-4 text-center text-red-600">Error fetching CVE data: {error}</div>;
  }

  if (!rows || rows.length === 0) {
    return <div className="p-4 text-center text-gray-600">No CVE data found for your query.</div>;
  }

  // Helper to extract CVSS base score
  const getCvssBaseScore = (impact: any): string => {
    try {
      const score = impact?.baseMetricV3?.cvssV3?.baseScore;
      const severity = impact?.baseMetricV3?.cvssV3?.baseSeverity;
      if (score !== undefined && severity) {
        return `${score} (${severity})`;
      }
      return 'N/A';
    } catch {
      return 'N/A';
    }
  };

  // Helper to extract primary CWE ID
  const getPrimaryCwe = (problemTypes: any): string => {
    try {
      const cwe = problemTypes?.[0]?.description?.[0]?.value;
      return cwe || 'N/A';
    } catch {
      return 'N/A';
    }
  };

  return (
    <div className="overflow-x-auto rounded-lg border border-gray-200 shadow-sm">
      <table className="min-w-full divide-y divide-gray-200 bg-white">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">CVE ID</th>
            <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Description</th>
            <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Published</th>
            <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">CVSS</th>
            <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">CWE</th>
            <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Assigner</th>
          </tr>
        </thead>
        <tbody className="divide-y divide-gray-200">
          {rows.map((row) => (
            <tr key={row.cve_id} className="hover:bg-gray-50">
              <td className="whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900">{row.cve_id}</td>
              <td className="px-6 py-4 text-sm text-gray-700">{row.description_text}</td>
              <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-700">
                {new Date(row.published_date).toLocaleDateString()}
              </td>
              <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-700">{getCvssBaseScore(row.impact_data)}</td>
              <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-700">{getPrimaryCwe(row.problem_type_data)}</td>
              <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-700">{row.assigner}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CveTable; 